tinymce.PluginManager.add('paste_upload_doc', function(editor, url) {

    var fileindex = 0;


    editor.on('drop', function(e) {

        var dataTransfer = e.dataTransfer;

        e.preventDefault();
        e.stopPropagation();

        if (dataTransfer && dataTransfer.files && dataTransfer.files.length ==  1 ) {

            var files = e.dataTransfer.files;

            state_upload = '';
            state_upload += '[** UPLOADING FILE == '+files[0].name+' **]';

            editor.execCommand('mceInsertContent',false, state_upload);

            //Create formdata objet to upload object as file on ajax request
            var fd = new FormData(); 
            fd.append('file_0', files[0]); 

            //make ajax call for upload doc
            res = uploadFile(fd,editor, IsImageFromDrop(files[0]));


            //replace upload state by html render of image
            replaceContent(editor,state_upload,res);

            //Set cursor at the end
            setCursorAtTheEnd(editor);

            
            //tinymce.activeEditor.notificationManager.close();
            

        }else{
            alert("Thanks to upload only one file");
        }
    });





    editor.on('PastePreProcess', function(e) {

        content = e.content;

        //Check if data is an image
        if(isImageFromPaste(content)){

            //bypass propagation
            e.preventDefault();
            e.stopPropagation();

            state_upload = '';

            //extract base64 data
            base64 = extractSrcFromImgTag(content);

            //create random filename
            filename = getRandomFileName();

            //create message for wait during upload
            state_upload += '[** UPLOADING FILE == '+filename+' **]';
            editor.execCommand('mceInsertContent',false, state_upload);

            //trasnform to blob
            blob = dataURItoBlob(base64);

            //create FormData to upload object as file on ajx request
            var fd = new FormData();
            fd.append("file_0", blob,filename);

            //upload file
            res = uploadFile(fd,editor,true);

            //replace upload state by html render of image
            replaceContent(editor,state_upload,res);

            //Set cursor at the end
            setCursorAtTheEnd(editor);  

            //editor.execCommand('mceReplaceContent',false, '');
            e.content = '';

        }

    });

    function replaceContent(editor,search,replace){

        if(!replace) replace = '';

        var re =/\[\*\*(.*?)\*\*\]/;
        body = editor.getContent();
        body = body.replace(re,replace);
        editor.setContent(body);
    }

    function setCursorAtTheEnd(editor){
        body = editor.getContent();
        body +='<p> </p>';
        editor.setContent(body);
        editor.dom.add(editor.getBody(),'p');
        editor.selection.select(editor.getBody(), true); // ed is the editor instance
        editor.selection.collapse(false);
    }

    function dataURItoBlob(dataURI) {
        // convert base64/URLEncoded data component to raw binary data held in a string
        var byteString;
        if (dataURI.split(',')[0].indexOf('base64') >= 0){
            byteString = atob(dataURI.split(',')[1]);
        }else{
            byteString = unescape(dataURI.split(',')[1]);
        }

        // separate out the mime component
        var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

        // write the bytes of the string to a typed array
        var ia = new Uint8Array(byteString.length);
        for (var i = 0; i < byteString.length; i++) {
            ia[i] = byteString.charCodeAt(i);
        }

        return new Blob([ia], {type:mimeString});
    }




    /**
     * Function to convert File object to File Reader
     *
     * @param      {String}      mimeType  The mime type
     * @param      {String}     base64    The base 64
     * @return     {FileReader}  File object
     */
    function convertFileToFileReader(file){

        var fr  = new FileReader();
        fr.fileName = file.name;
        fr.readAsDataURL(file);
        return fr;
    }

    function getRandomFileName(){
        return 'image_paste'+ Math.floor((Math.random() * 10000000) + 1); ;
    }


    /**
     * Function to convert base64 data to File Object
     *
     * @param      {String}      mimeType  The mime type
     * @param      {String}     base64    The base 64
     * @return     {FileReader}  File object
     */
    function convertBase64ToFileReader(mimeType , base64){

        var the_file = new Blob([window.atob(base64)],  {type: mimeType, encoding: 'utf-8'});
        var fr = new FileReader();

        fr.onload = function ( oFREvent ) {
            var v = oFREvent.target.result.split(',')[1]; // encoding is messed up here, so we fix it
            v = atob(v);
            var good_b64 = btoa(decodeURIComponent(escape(v)));
        };

        fr.fileName = 'image_paste'+ Math.floor((Math.random() * 10000000) + 1); ;
        fr.readAsDataURL(the_file);

        return fr;
    }


    /**
     * Function to check if data paste on TinyMCE is an image
     *
     * @param      String content  The img tag
     * @return     String mimeType   return mimeType of data
     */
    function isImageFromPaste(content){

        var regex1 = new RegExp('<img src="data:image\/');   
        var regex2 = new RegExp('<img alt="" src="data:image\/');   

        if(content.match(regex1) || content.match(regex2)){
            return true;
        }else{
            return false;
        }

    }

    /**
     * Function to remove 'alt' attribute  
     *
     * @param      {string}  content  The content
     * @return     {string}  content The content cleaning
     */
    function cleanDataPasted(content){

        content = content.replace('alt=""', '');
        return content;

    }


    /**
     * Function to extract mimeType data from img tag process bu TinyMCE
     *
     * @param      String content  The img tag
     * @return     String mimeType   return mimeType of data
     */
    function extractMimeTypeFromImgTag(content){

        content = extractSrcFromImgTag(content);
        type = content.split(',')[0]; //data:image/png;base64
        mimetype = type.split(';')[0];
        mimetype = mimetype.split(':')[1];
        return mimetype;

    }

    /**
     * Function to extract base64 data from img tag process bu TinyMCE
     *
     * @param      String content  The img tag
     * @return     String base64   return base64 data
     */
    function extractBase64FromImgTag(content){

        content = extractSrcFromImgTag(content);
        base64 = content.split(',')[1];
        return base64;

    }



    /**
     * Function to extract src tag from img tag process bu TinyMCE
     *
     * @param      {string}  content  The img tag
     */
    function extractSrcFromImgTag(content){

        var match = content.match(/\<img.+src\=(?:\"|\')(.+?)(?:\"|\')(?:.+?)\>/)
        return match[1];

    }


    /**
     * Determines if data from drop is an image.
     *
     * @param      {<type>}   file    The file
     * @return     {boolean}  True if image, False otherwise.
     */
    function IsImageFromDrop(file){
        var fileType = file["type"];
        var ValidImageTypes = ["image/gif", "image/jpeg", "image/png"];
        if ($.inArray(fileType, ValidImageTypes) < 0) {
            return false;
        }else{
            return true;
        }
    }




    function uploadFile(fd,editor,image){ // upload function

        returnS = false;

        $.ajax({ // JQuery Ajax
            type: 'POST',
            url: '../ajax/uploadfile.php', 
            data: fd,
            processData: false,
            contentType: false,
            dataType: 'JSON',
            async: false,
            success: function(data) {
                $.each(data, function(index, element) {
                   if(element[0].error == undefined){
                        
                        tag = getFileTag(element);
                        //if is an image add tag 
                        if(image){
                            returnS = tag.tag;
                        }
                        //display uploaded file
                        displayUploadedFile(element[0],tag,image);

                   }else{
                        returnS = false;
                        alert(element[0].error);
                   }  
                });
            },

            error: function (request, status, error) {
                console.log(request.responseText);
            }
        });

        return returnS;
    }



    function getFileTag(data){ // upload function
                               // 
        returnString = '';

        $.ajax({ 
            type: 'POST',
            url: '../ajax/getFileTag.php', 
            data: {'data':data},
            dataType: 'JSON',
            async: false,
            success: function(data) {                   
                returnString = data[0];
            },
            error: function (request, status, error) {
                console.log(request.responseText);
                returnString=false;
            }
        });

        return returnString;

    }

    function displayUploadedFile(file, tag , image = true){

        //manage input name switch file type
        name = '_stock_image';
        if(!image){
            name = '_filename';
            file.id = file.id.replace('docstock_image','docfilename');
        }

        rand = Math.random();


        var p = $('<p/>').attr('id',file.id).html('<b>Fichier : </b>'+file.display+' <b>Tag : </b>'+tag.tag+' ').appendTo('#fileupload_info');
        var p2 = $('<p/>').attr('id',file.id+'2').css({'display':'none'}).appendTo('#fileupload_info');

        // File
        $('<input/>').attr('type', 'hidden').attr('name', name+'['+fileindex+']').attr('value',file.name).appendTo(p);
        // Tag
        $('<input/>').attr('type', 'hidden').attr('name', '_tag'+name+'['+fileindex+']').attr('value', tag.name).appendTo(p);

        // Delete button
        var elementsIdToRemove = {0:file.id, 1:file.id+'2'};
        $('<img src="../pics/delete.png" class="pointer">').click(function(){
        deleteImagePasted(elementsIdToRemove, tag.tag);
        }).appendTo(p);

        fileindex++;
    }


    function deleteImagePasted(elementsIdToRemove, tagToRemove){
        // Remove file display lines
        $.each(elementsIdToRemove, function (index, id) {
            $('#'+id).remove();
        });
        tinyMCE.activeEditor.setContent(tinyMCE.activeEditor.getContent().replace('<p>'+tagToRemove+'</p>', ''));
    }



});