tinymce.PluginManager.add('paste_upload_doc', function(editor, url) {


    editor.on('drop', function(e) {

        var dataTransfer = e.dataTransfer;

        e.preventDefault();
        e.stopPropagation();


        if (dataTransfer && dataTransfer.files && dataTransfer.files.length > 0) {

            upload = '[UPLOADING FILE ==>'

            var files = e.dataTransfer.files;
            filesLen = files.length;

            for (var i = 0 ; i < filesLen ; i++) {

                //each file is File object

                filename = "";
                size = "";
                type = "";
                content = "";

                filename = files[i].name;
                size =  files[i].size;
                type =  files[i].type;

                upload += ' '+filename+' ';

                console.log('Fichier : ' + i + '\nNom : ' + filename + ' \ntaille : '+  size+ ' \ntype : '+  type);

                //fr = convertFileToFileReader(files[i]);
                //console.log(fr);

            }

            upload += ']';

            uploadFile( e.dataTransfer.files,editor);

            editor.execCommand('mceInsertContent',false, upload);

        }
    });





    editor.on('PastePreProcess', function(e) {

        content = e.content;

        if(isImage(content)){

            //TODO : method to upload image and display "wait" and finally display image on editor or error 
            content = cleanDataPasted(content);
            base64 = extractSrcFromImgTag(content);

            dataURItoBlob(base64);

            //fr = convertBase64ToFileReader(type,base64);

           // console.log(fr);

            //don't diplay image
            e.content = '';
        }

    });


function dataURItoBlob(dataURI) {
    // convert base64/URLEncoded data component to raw binary data held in a string
    var byteString;
    if (dataURI.split(',')[0].indexOf('base64') >= 0)
        byteString = atob(dataURI.split(',')[1]);
    else
        byteString = unescape(dataURI.split(',')[1]);

    // separate out the mime component
    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

    // write the bytes of the string to a typed array
    var ia = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }

    return new Blob([ia], {type:mimeString});
}




/**
 * Function to convert File object to File Reader
 *
 * @param      {String}      mimeType  The mime type
 * @param      {String}     base64    The base 64
 * @return     {FileReader}  File object
 */
function convertFileToFileReader(file){

    var fr  = new FileReader();
    fr.fileName = file.name;
    fr.readAsDataURL(file);
    return fr;
}




/**
 * Function to convert base64 data to File Object
 *
 * @param      {String}      mimeType  The mime type
 * @param      {String}     base64    The base 64
 * @return     {FileReader}  File object
 */
function convertBase64ToFileReader(mimeType , base64){

    var the_file = new Blob([window.atob(base64)],  {type: mimeType, encoding: 'utf-8'});
    var fr = new FileReader();

    fr.onload = function ( oFREvent ) {
        var v = oFREvent.target.result.split(',')[1]; // encoding is messed up here, so we fix it
        v = atob(v);
        var good_b64 = btoa(decodeURIComponent(escape(v)));
    };


    fr.fileName = 'image_paste'+ Math.floor((Math.random() * 10000000) + 1); ;
    fr.readAsDataURL(the_file);

    return fr;
}



/**
 * Function to check if data paste on TinyMCE is an image
 *
 * @param      String content  The img tag
 * @return     String mimeType   return mimeType of data
 */
function isImage(content){

    var regex1 = new RegExp('<img src="data:image\/');   
    var regex2 = new RegExp('<img alt="" src="data:image\/');   

    if(content.match(regex1) || content.match(regex2)){
        return true;
    }else{
        return false;
    }

}

/**
 * Function to remove 'alt' attribute  
 *
 * @param      {string}  content  The content
 * @return     {string}  content The content cleaning
 */
function cleanDataPasted(content){

    content = content.replace('alt=""', '');
    return content;

}


/**
 * Function to extract mimeType data from img tag process bu TinyMCE
 *
 * @param      String content  The img tag
 * @return     String mimeType   return mimeType of data
 */
function extractMimeTypeFromImgTag(content){

    content = extractSrcFromImgTag(content);
    type = content.split(',')[0]; //data:image/png;base64
    mimetype = type.split(';')[0];
    mimetype = mimetype.split(':')[1];


    return mimetype;

}

/**
 * Function to extract base64 data from img tag process bu TinyMCE
 *
 * @param      String content  The img tag
 * @return     String base64   return base64 data
 */
function extractBase64FromImgTag(content){

    content = extractSrcFromImgTag(content);
    base64 = content.split(',')[1];
    return base64;

}



/**
 * Function to extract src tag from img tag process bu TinyMCE
 *
 * @param      {string}  content  The img tag
 */
function extractSrcFromImgTag(content){

        var match = content.match(/\<img.+src\=(?:\"|\')(.+?)(?:\"|\')(?:.+?)\>/)
        return match[1];

}




function uploadFile(file,editor,item_type = '', item_id = ''){ // upload function
                        // 
    var fd = new FormData(); // Create a FormData object
    fd.append('file_upload', files[i]);
    
    $.ajax({ // JQuery Ajax
        type: 'POST',
        url: '../ajax/uploadfile.php', // URL to the PHP file which will insert new value in the database
        data: fd, // We send the data string
        processData: false,
        contentType: false,
        success: function(data) {
           editor.execCommand('mceInsertContent',false, data);
        },
        xhrFields: { //
            onprogress: function (e) {
                if (e.lengthComputable) {
                    
                }
            }
        },
        error: function (request, status, error) {
            console.log(request.responseText);
        }
    });

}






});